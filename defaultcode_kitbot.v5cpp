{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor driveLMotorA = motor(PORT1, ratio18_1, true);\nmotor driveLMotorB = motor(PORT7, ratio18_1, true);\nmotor_group driveL = motor_group(driveLMotorA, driveLMotorB);\n\nmotor driveRMotorA = motor(PORT2, ratio18_1, false);\nmotor driveRMotorB = motor(PORT10, ratio18_1, false);\nmotor_group driveR = motor_group(driveRMotorA, driveRMotorB);\n\nmotor fly = motor(PORT4, ratio6_1, true);\n\nmotor intake = motor(PORT6, ratio18_1, false);\n\nmotor indexer = motor(PORT3, ratio36_1, true);\n\n/*vex-vision-config:begin*/\nvision Vision18 = vision (PORT18, 50);\n/*vex-vision-config:end*/\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  indexer.setMaxTorque(100,percent);\n  indexer.spin(forward, 12, volt);\n  wait(0.5, seconds);\n  indexer.spin(reverse, 12, volt);\n  wait(1.5, seconds);\n  indexer.stop();\n  indexer.setPosition(10, degrees);\n  indexer.setMaxTorque(100,percent);\n\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n  bool intakestop=true;\n  bool flystop=true;\n  int driveout=0;\n  int turnout=0;\n  \n  indexer.setVelocity(100,percent);\n  indexer.setMaxTorque(100,percent);\n  indexer.setStopping(brake);\n  intake.setVelocity(100,percent);\n  fly.setVelocity(100,percent);\n  indexer.setTimeout(.5, seconds);\n  driveR.setStopping(coast);\n  driveL.setStopping(coast);\n\n  indexer.spin(reverse, 12, volt);\n  wait(1, seconds);\n  indexer.setPosition(5, degrees);\n  indexer.stop();\n  \n  int indexstep=0;\n  \n  \n  while (true) {\n\n    //intake\n    if (Controller1.ButtonL1.pressing()){intake.spin(forward); intakestop=false;} //start rolling forward.\n    if (Controller1.ButtonL2.pressing()) {intakestop=true; intake.spin(reverse);}  //stop rolling forward and set to stop upon release.\n    else if (intakestop) {intake.stop();}  //stop upon release.\n\n    //R1 spins up the flywheel to full speed, instead of partial speed.\n    if (Controller1.ButtonR1.pressing()){fly.spin(forward, 12, volt); flystop=false;} \n    else if (flystop) {fly.stop();}\n    else {fly.spin(forward, 4, volt);}\n    if (Controller1.ButtonX.pressing()){flystop=true;}\n\n    //Fire\n    /*\n    if (Controller1.ButtonR2.pressing()){indexer.spinToPosition(70, degrees, false); indexstep=1;}\n    else if (indexer.position(degrees)<5&&indexer.velocity(percent)==0&&indexstep==2) {indexer.stop();}\n    else if (indexstep==1) {indexer.spinToPosition(0, degrees, false); indexstep=2;}\n  */\n    \n    if (Controller1.ButtonR2.pressing()){indexer.spin(forward, 12, volt); indexstep=0;}\n    else if (indexstep<30){indexer.spinToPosition(0, degrees, false); indexstep++;}\n    else if (indexstep<55) {indexer.spin(reverse, 0, volt); indexstep++;}\n    else {indexer.spin(forward, 0, volt);}\n\n    //Drive\n    driveout=Controller1.Axis3.position();\n    turnout=Controller1.Axis1.position()*.7;  //modifier\n\n    driveL.spin(forward, (driveout+turnout)*.12, volt); //convert to volts and add\n    driveR.spin(forward, (driveout-turnout)*.12, volt); //subtract\n\n\n    \n    wait(20, msec);\n  }\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[1,7],"name":"driveL","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"}},{"port":[2,10],"name":"driveR","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"}},{"port":[4],"name":"fly","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[6],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}},{"port":[3],"name":"indexer","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[18],"name":"Vision18","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false","id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}